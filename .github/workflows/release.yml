name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  id-token: write
  contents: write

jobs:
  test:
    name: Final Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libudev-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Cache cargo registry
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --all-features

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: test
    environment: release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libudev-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Cache cargo registry
        uses: Swatinem/rust-cache@v2

      - name: Verify tag version matches Cargo.toml
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
          echo "Version check passed: $TAG_VERSION"

      - name: Build in release mode
        run: cargo build --release

      - name: Get authentication token for crates.io
        uses: rust-lang/crates-io-auth-action@v1
        id: auth

      - name: Publish to crates.io
        run: cargo publish --token ${{ steps.auth.outputs.token }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Extract version changelog
        id: changelog
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          # Extract changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG_TEXT=$(awk -v version="$VERSION" '
              /^## \[/ {
                if (found) exit
                if (index($0, version) > 0) found = 1
                next
              }
              found { print }
            ' CHANGELOG.md | sed '/^$/d' | head -n -1)

            if [ -z "$CHANGELOG_TEXT" ]; then
              CHANGELOG_TEXT="Release version $VERSION"
            fi

            # Save to file to preserve formatting
            echo "$CHANGELOG_TEXT" > release_notes.txt
          else
            echo "Release version $VERSION" > release_notes.txt
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.changelog.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: false